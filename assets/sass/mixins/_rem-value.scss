// ============================================================================
//  REMs
// ============================================================================

//  Takes a pixel value and returns it as a rem value.

    @function rem-value($value) {
        $rem-value: ($value / $base-font-size) * 1rem;
        @return $rem-value;
    }



    @function unit-to-px($val) {
        @if $val == auto {
            @return $val;
        }
        @else {
            @if unitless($val) {
                @if $val == 0 { @return $val }
                @else { @return $val * $base-font-size };
            } @else { @return $val };
        }
    }

    @function unit-to-rem($val) {
        @if $val == auto {
            @return $val;
        }
        @else {
            @if unitless($val) {
                @if $val == 0 { @return $val }
                @else { @return $val+rem };
            } @else { @return ($val / $base-font-size) * 1rem };
            // } @else { @return $val };
        }
    }


//  This mixin outputs a property with rem units and a px fallback.
//  Values passed without units are used as multipliers for the final
//  rem and px values, all other units are output without modification.
//  $unit-default-px represents the root value of the document font-size
//  in pixels.
//
//  Via: http://designbyjoel.com/blog/2013-02-28-sass-rems/
// 
//  Usage:
//  @include px-and-rem([property], [multiplier | explicit value] [, ...]);

    @mixin rem($prop, $val...) {
        $n: length($val);
        $i: 1;

        $px-list: ();
        $rem-list: ();

        @while $i <= $n {
            $px-list: append($px-list, unit-to-px(nth($val, $i)));
            $rem-list: append($rem-list, unit-to-rem(nth($val, $i)));
            $i: $i + 1;
        }

        #{$prop}: $px-list;
        #{$prop}: $rem-list;
    }